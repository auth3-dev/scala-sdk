// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package dev.auth3.identity.admin.admin

@SerialVersionUID(0L)
final case class GetUserBaseStatisticsResponse(
    totalUsers: _root_.scala.Int = 0,
    usersPerDay: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    sessionsPerDay: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int] = _root_.scala.collection.immutable.Map.empty,
    totalActiveUsers: _root_.scala.Int = 0,
    totalLifetimeUsed: _root_.scala.Double = 0.0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GetUserBaseStatisticsResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = totalUsers
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      usersPerDay.foreach { __item =>
        val __value = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_usersPerDay.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      sessionsPerDay.foreach { __item =>
        val __value = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_sessionsPerDay.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = totalActiveUsers
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      
      {
        val __value = totalLifetimeUsed
        if (__value != 0.0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = totalUsers
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      usersPerDay.foreach { __v =>
        val __m = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_usersPerDay.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sessionsPerDay.foreach { __v =>
        val __m = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_sessionsPerDay.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = totalActiveUsers
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      {
        val __v = totalLifetimeUsed
        if (__v != 0.0) {
          _output__.writeDouble(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withTotalUsers(__v: _root_.scala.Int): GetUserBaseStatisticsResponse = copy(totalUsers = __v)
    def clearUsersPerDay = copy(usersPerDay = _root_.scala.collection.immutable.Map.empty)
    def addUsersPerDay(__vs: (_root_.scala.Predef.String, _root_.scala.Int) *): GetUserBaseStatisticsResponse = addAllUsersPerDay(__vs)
    def addAllUsersPerDay(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Int)]): GetUserBaseStatisticsResponse = copy(usersPerDay = usersPerDay ++ __vs)
    def withUsersPerDay(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]): GetUserBaseStatisticsResponse = copy(usersPerDay = __v)
    def clearSessionsPerDay = copy(sessionsPerDay = _root_.scala.collection.immutable.Map.empty)
    def addSessionsPerDay(__vs: (_root_.scala.Predef.String, _root_.scala.Int) *): GetUserBaseStatisticsResponse = addAllSessionsPerDay(__vs)
    def addAllSessionsPerDay(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Int)]): GetUserBaseStatisticsResponse = copy(sessionsPerDay = sessionsPerDay ++ __vs)
    def withSessionsPerDay(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]): GetUserBaseStatisticsResponse = copy(sessionsPerDay = __v)
    def withTotalActiveUsers(__v: _root_.scala.Int): GetUserBaseStatisticsResponse = copy(totalActiveUsers = __v)
    def withTotalLifetimeUsed(__v: _root_.scala.Double): GetUserBaseStatisticsResponse = copy(totalLifetimeUsed = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = totalUsers
          if (__t != 0) __t else null
        }
        case 2 => usersPerDay.iterator.map(dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_usersPerDay.toBase(_)).toSeq
        case 3 => sessionsPerDay.iterator.map(dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_sessionsPerDay.toBase(_)).toSeq
        case 4 => {
          val __t = totalActiveUsers
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = totalLifetimeUsed
          if (__t != 0.0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(totalUsers)
        case 2 => _root_.scalapb.descriptors.PRepeated(usersPerDay.iterator.map(dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_usersPerDay.toBase(_).toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(sessionsPerDay.iterator.map(dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_sessionsPerDay.toBase(_).toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PInt(totalActiveUsers)
        case 5 => _root_.scalapb.descriptors.PDouble(totalLifetimeUsed)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.type = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse
    // @@protoc_insertion_point(GeneratedMessage[depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse])
}

object GetUserBaseStatisticsResponse extends scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse = {
    var __totalUsers: _root_.scala.Int = 0
    val __usersPerDay: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Int]
    val __sessionsPerDay: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Int), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Int]
    var __totalActiveUsers: _root_.scala.Int = 0
    var __totalLifetimeUsed: _root_.scala.Double = 0.0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __totalUsers = _input__.readInt32()
        case 18 =>
          __usersPerDay += dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_usersPerDay.toCustom(_root_.scalapb.LiteParser.readMessage[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry](_input__))
        case 26 =>
          __sessionsPerDay += dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_sessionsPerDay.toCustom(_root_.scalapb.LiteParser.readMessage[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry](_input__))
        case 32 =>
          __totalActiveUsers = _input__.readInt32()
        case 41 =>
          __totalLifetimeUsed = _input__.readDouble()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse(
        totalUsers = __totalUsers,
        usersPerDay = __usersPerDay.result(),
        sessionsPerDay = __sessionsPerDay.result(),
        totalActiveUsers = __totalActiveUsers,
        totalLifetimeUsed = __totalLifetimeUsed,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse(
        totalUsers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        usersPerDay = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_usersPerDay.toCustom(_)).toMap,
        sessionsPerDay = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse._typemapper_sessionsPerDay.toCustom(_)).toMap,
        totalActiveUsers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        totalLifetimeUsed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(63)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(63)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry
      case 3 => __out = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry,
      _root_.dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse(
    totalUsers = 0,
    usersPerDay = _root_.scala.collection.immutable.Map.empty,
    sessionsPerDay = _root_.scala.collection.immutable.Map.empty,
    totalActiveUsers = 0,
    totalLifetimeUsed = 0.0
  )
  @SerialVersionUID(0L)
  final case class UsersPerDayEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UsersPerDayEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): UsersPerDayEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): UsersPerDayEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry.type = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry
      // @@protoc_insertion_point(GeneratedMessage[depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry])
  }
  
  object UsersPerDayEntry extends scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry(
      key = "",
      value = 0
    )
    implicit class UsersPerDayEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry, (_root_.scala.Predef.String, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry, (_root_.scala.Predef.String, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Int
    ): _root_.dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry = _root_.dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry])
  }
  
  @SerialVersionUID(0L)
  final case class SessionsPerDayEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SessionsPerDayEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): SessionsPerDayEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Int): SessionsPerDayEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PInt(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry.type = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry
      // @@protoc_insertion_point(GeneratedMessage[depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry])
  }
  
  object SessionsPerDayEntry extends scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry(
      key = "",
      value = 0
    )
    implicit class SessionsPerDayEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry, (_root_.scala.Predef.String, _root_.scala.Int)] =
      _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry, (_root_.scala.Predef.String, _root_.scala.Int)](__m => (__m.key, __m.value))(__p => dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Int
    ): _root_.dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry = _root_.dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry])
  }
  
  implicit class GetUserBaseStatisticsResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse](_l) {
    def totalUsers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.totalUsers)((c_, f_) => c_.copy(totalUsers = f_))
    def usersPerDay: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = field(_.usersPerDay)((c_, f_) => c_.copy(usersPerDay = f_))
    def sessionsPerDay: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int]] = field(_.sessionsPerDay)((c_, f_) => c_.copy(sessionsPerDay = f_))
    def totalActiveUsers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.totalActiveUsers)((c_, f_) => c_.copy(totalActiveUsers = f_))
    def totalLifetimeUsed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.totalLifetimeUsed)((c_, f_) => c_.copy(totalLifetimeUsed = f_))
  }
  final val TOTAL_USERS_FIELD_NUMBER = 1
  final val USERS_PER_DAY_FIELD_NUMBER = 2
  final val SESSIONS_PER_DAY_FIELD_NUMBER = 3
  final val TOTAL_ACTIVE_USERS_FIELD_NUMBER = 4
  final val TOTAL_LIFETIME_USED_FIELD_NUMBER = 5
  @transient
  private[admin] val _typemapper_usersPerDay: _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry, (_root_.scala.Predef.String, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.UsersPerDayEntry, (_root_.scala.Predef.String, _root_.scala.Int)]]
  @transient
  private[admin] val _typemapper_sessionsPerDay: _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry, (_root_.scala.Predef.String, _root_.scala.Int)] = implicitly[_root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse.SessionsPerDayEntry, (_root_.scala.Predef.String, _root_.scala.Int)]]
  def of(
    totalUsers: _root_.scala.Int,
    usersPerDay: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int],
    sessionsPerDay: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Int],
    totalActiveUsers: _root_.scala.Int,
    totalLifetimeUsed: _root_.scala.Double
  ): _root_.dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse = _root_.dev.auth3.identity.admin.admin.GetUserBaseStatisticsResponse(
    totalUsers,
    usersPerDay,
    sessionsPerDay,
    totalActiveUsers,
    totalLifetimeUsed
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[depot.devtools.auth.v0.identity.admin.GetUserBaseStatisticsResponse])
}
