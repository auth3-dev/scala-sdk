// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package dev.auth3.identity.admin.admin

@SerialVersionUID(0L)
final case class GetCredentialsResponse(
    credentials: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GetCredentialsResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      credentials.foreach { __item =>
        val __value = dev.auth3.identity.admin.admin.GetCredentialsResponse._typemapper_credentials.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      credentials.foreach { __v =>
        val __m = dev.auth3.identity.admin.admin.GetCredentialsResponse._typemapper_credentials.toBase(__v)
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearCredentials = copy(credentials = _root_.scala.collection.immutable.Map.empty)
    def addCredentials(__vs: (_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential) *): GetCredentialsResponse = addAllCredentials(__vs)
    def addAllCredentials(__vs: Iterable[(_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential)]): GetCredentialsResponse = copy(credentials = credentials ++ __vs)
    def withCredentials(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]): GetCredentialsResponse = copy(credentials = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => credentials.iterator.map(dev.auth3.identity.admin.admin.GetCredentialsResponse._typemapper_credentials.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(credentials.iterator.map(dev.auth3.identity.admin.admin.GetCredentialsResponse._typemapper_credentials.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: dev.auth3.identity.admin.admin.GetCredentialsResponse.type = dev.auth3.identity.admin.admin.GetCredentialsResponse
    // @@protoc_insertion_point(GeneratedMessage[depot.devtools.auth.v0.identity.admin.GetCredentialsResponse])
}

object GetCredentialsResponse extends scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetCredentialsResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetCredentialsResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): dev.auth3.identity.admin.admin.GetCredentialsResponse = {
    val __credentials: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __credentials += dev.auth3.identity.admin.admin.GetCredentialsResponse._typemapper_credentials.toCustom(_root_.scalapb.LiteParser.readMessage[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    dev.auth3.identity.admin.admin.GetCredentialsResponse(
        credentials = __credentials.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[dev.auth3.identity.admin.admin.GetCredentialsResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      dev.auth3.identity.admin.admin.GetCredentialsResponse(
        credentials = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(dev.auth3.identity.admin.admin.GetCredentialsResponse._typemapper_credentials.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AdminProto.javaDescriptor.getMessageTypes().get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AdminProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential,
      _root_.dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = dev.auth3.identity.admin.admin.GetCredentialsResponse(
    credentials = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class Credential(
      credentialId: _root_.scala.Predef.String = "",
      createdAt: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
      updatedAt: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
      identityId: _root_.scala.Predef.String = "",
      `type`: _root_.scala.Int = 0,
      name: _root_.scala.Predef.String = "",
      configured: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Credential] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = credentialId
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (createdAt.isDefined) {
          val __value = createdAt.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (updatedAt.isDefined) {
          val __value = updatedAt.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        
        {
          val __value = identityId
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
          }
        };
        
        {
          val __value = `type`
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
          }
        };
        
        {
          val __value = name
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
          }
        };
        
        {
          val __value = configured
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = credentialId
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        createdAt.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        updatedAt.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = identityId
          if (!__v.isEmpty) {
            _output__.writeString(4, __v)
          }
        };
        {
          val __v = `type`
          if (__v != 0) {
            _output__.writeInt32(5, __v)
          }
        };
        {
          val __v = name
          if (!__v.isEmpty) {
            _output__.writeString(6, __v)
          }
        };
        {
          val __v = configured
          if (__v != false) {
            _output__.writeBool(7, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withCredentialId(__v: _root_.scala.Predef.String): Credential = copy(credentialId = __v)
      def getCreatedAt: com.google.protobuf.timestamp.Timestamp = createdAt.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
      def clearCreatedAt: Credential = copy(createdAt = _root_.scala.None)
      def withCreatedAt(__v: com.google.protobuf.timestamp.Timestamp): Credential = copy(createdAt = Option(__v))
      def getUpdatedAt: com.google.protobuf.timestamp.Timestamp = updatedAt.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
      def clearUpdatedAt: Credential = copy(updatedAt = _root_.scala.None)
      def withUpdatedAt(__v: com.google.protobuf.timestamp.Timestamp): Credential = copy(updatedAt = Option(__v))
      def withIdentityId(__v: _root_.scala.Predef.String): Credential = copy(identityId = __v)
      def withType(__v: _root_.scala.Int): Credential = copy(`type` = __v)
      def withName(__v: _root_.scala.Predef.String): Credential = copy(name = __v)
      def withConfigured(__v: _root_.scala.Boolean): Credential = copy(configured = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = credentialId
            if (__t != "") __t else null
          }
          case 2 => createdAt.orNull
          case 3 => updatedAt.orNull
          case 4 => {
            val __t = identityId
            if (__t != "") __t else null
          }
          case 5 => {
            val __t = `type`
            if (__t != 0) __t else null
          }
          case 6 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 7 => {
            val __t = configured
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(credentialId)
          case 2 => createdAt.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => updatedAt.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => _root_.scalapb.descriptors.PString(identityId)
          case 5 => _root_.scalapb.descriptors.PInt(`type`)
          case 6 => _root_.scalapb.descriptors.PString(name)
          case 7 => _root_.scalapb.descriptors.PBoolean(configured)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential.type = dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential
      // @@protoc_insertion_point(GeneratedMessage[depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential])
  }
  
  object Credential extends scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential = {
      var __credentialId: _root_.scala.Predef.String = ""
      var __createdAt: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
      var __updatedAt: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None
      var __identityId: _root_.scala.Predef.String = ""
      var __type: _root_.scala.Int = 0
      var __name: _root_.scala.Predef.String = ""
      var __configured: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __credentialId = _input__.readStringRequireUtf8()
          case 18 =>
            __createdAt = Option(__createdAt.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 26 =>
            __updatedAt = Option(__updatedAt.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.timestamp.Timestamp](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 34 =>
            __identityId = _input__.readStringRequireUtf8()
          case 40 =>
            __type = _input__.readInt32()
          case 50 =>
            __name = _input__.readStringRequireUtf8()
          case 56 =>
            __configured = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential(
          credentialId = __credentialId,
          createdAt = __createdAt,
          updatedAt = __updatedAt,
          identityId = __identityId,
          `type` = __type,
          name = __name,
          configured = __configured,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential(
          credentialId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          createdAt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
          updatedAt = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
          identityId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          configured = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = dev.auth3.identity.admin.admin.GetCredentialsResponse.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = dev.auth3.identity.admin.admin.GetCredentialsResponse.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = com.google.protobuf.timestamp.Timestamp
        case 3 => __out = com.google.protobuf.timestamp.Timestamp
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential(
      credentialId = "",
      createdAt = _root_.scala.None,
      updatedAt = _root_.scala.None,
      identityId = "",
      `type` = 0,
      name = "",
      configured = false
    )
    implicit class CredentialLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential](_l) {
      def credentialId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.credentialId)((c_, f_) => c_.copy(credentialId = f_))
      def createdAt: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getCreatedAt)((c_, f_) => c_.copy(createdAt = Option(f_)))
      def optionalCreatedAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.createdAt)((c_, f_) => c_.copy(createdAt = f_))
      def updatedAt: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getUpdatedAt)((c_, f_) => c_.copy(updatedAt = Option(f_)))
      def optionalUpdatedAt: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.updatedAt)((c_, f_) => c_.copy(updatedAt = f_))
      def identityId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.identityId)((c_, f_) => c_.copy(identityId = f_))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def configured: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.configured)((c_, f_) => c_.copy(configured = f_))
    }
    final val CREDENTIAL_ID_FIELD_NUMBER = 1
    final val CREATED_AT_FIELD_NUMBER = 2
    final val UPDATED_AT_FIELD_NUMBER = 3
    final val IDENTITY_ID_FIELD_NUMBER = 4
    final val TYPE_FIELD_NUMBER = 5
    final val NAME_FIELD_NUMBER = 6
    final val CONFIGURED_FIELD_NUMBER = 7
    def of(
      credentialId: _root_.scala.Predef.String,
      createdAt: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
      updatedAt: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
      identityId: _root_.scala.Predef.String,
      `type`: _root_.scala.Int,
      name: _root_.scala.Predef.String,
      configured: _root_.scala.Boolean
    ): _root_.dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential = _root_.dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential(
      credentialId,
      createdAt,
      updatedAt,
      identityId,
      `type`,
      name,
      configured
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.Credential])
  }
  
  @SerialVersionUID(0L)
  final case class CredentialsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CredentialsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): CredentialsEntry = copy(key = __v)
      def getValue: dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential = value.getOrElse(dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential.defaultInstance)
      def clearValue: CredentialsEntry = copy(value = _root_.scala.None)
      def withValue(__v: dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential): CredentialsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry.type = dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry
      // @@protoc_insertion_point(GeneratedMessage[depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.CredentialsEntry])
  }
  
  object CredentialsEntry extends scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = dev.auth3.identity.admin.admin.GetCredentialsResponse.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = dev.auth3.identity.admin.admin.GetCredentialsResponse.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class CredentialsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry, (_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential)] =
      _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry, (_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential)](__m => (__m.key, __m.getValue))(__p => dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]
    ): _root_.dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry = _root_.dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[depot.devtools.auth.v0.identity.admin.GetCredentialsResponse.CredentialsEntry])
  }
  
  implicit class GetCredentialsResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, dev.auth3.identity.admin.admin.GetCredentialsResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, dev.auth3.identity.admin.admin.GetCredentialsResponse](_l) {
    def credentials: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]] = field(_.credentials)((c_, f_) => c_.copy(credentials = f_))
  }
  final val CREDENTIALS_FIELD_NUMBER = 1
  @transient
  private[admin] val _typemapper_credentials: _root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry, (_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential)] = implicitly[_root_.scalapb.TypeMapper[dev.auth3.identity.admin.admin.GetCredentialsResponse.CredentialsEntry, (_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential)]]
  def of(
    credentials: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, dev.auth3.identity.admin.admin.GetCredentialsResponse.Credential]
  ): _root_.dev.auth3.identity.admin.admin.GetCredentialsResponse = _root_.dev.auth3.identity.admin.admin.GetCredentialsResponse(
    credentials
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[depot.devtools.auth.v0.identity.admin.GetCredentialsResponse])
}
